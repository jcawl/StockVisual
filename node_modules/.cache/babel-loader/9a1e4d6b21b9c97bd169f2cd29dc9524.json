{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jcawl/code/react/data-vizualization/src/Map.js\";\nimport React from \"react\";\nimport Chart from \"react-google-charts\";\nexport default class Financials extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: [],\n      USD: 0,\n      JPY: 0,\n      EUR: 0,\n      GBP: 0,\n      AUD: 0,\n      CAD: 0,\n      CNY: 0,\n      CHF: 0,\n      KRW: 0,\n      BRL: 0,\n      RUB: 0,\n      ZAR: 0,\n      NGN: 0,\n      EGP: 0,\n      DZD: 0,\n      MAD: 0,\n      PHP: 0,\n      INR: 0\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://finnhub.io/api/v1/forex/rates?base=USD&token=bvhs6ef48v6okueau8n0').then(res => res.json()).then(data => {\n      console.log(data.quote);\n      this.setState({\n        contacts: data\n      });\n      this.setState({\n        USD: data.quote.USD\n      });\n      this.setState({\n        JPY: data.quote.JPY\n      });\n      this.setState({\n        EUR: data.quote.EUR\n      });\n      this.setState({\n        GBP: data.quote.GBP\n      });\n      this.setState({\n        AUD: data.quote.AUD\n      });\n      this.setState({\n        CAD: data.quote.CAD\n      });\n      this.setState({\n        CNY: data.quote.CNY\n      });\n      this.setState({\n        CHF: data.quote.CHF\n      });\n      this.setState({\n        KRW: data.quote.KRW\n      });\n      this.setState({\n        BRL: data.quote.BRL\n      });\n      this.setState({\n        RUB: data.quote.RUB\n      });\n      this.setState({\n        ZAR: data.quote.ZAR\n      });\n      this.setState({\n        NGN: data.quote.NGN\n      });\n      this.setState({\n        EGP: data.quote.EGP\n      });\n      this.setState({\n        DZD: data.quote.DZD\n      });\n      this.setState({\n        MAD: data.quote.MAD\n      });\n      this.setState({\n        PHP: data.quote.PHP\n      });\n      this.setState({\n        INR: data.quote.INR\n      });\n    }).catch(console.log);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"90%\",\n        \"margineLeft\": \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        width: '80vw',\n        height: '80vh',\n        chartType: \"GeoChart\",\n        data: [['Country', '1 USD'], ['United States', this.state.USD], ['Japan', this.state.JPY], ['Germany', this.state.EUR], ['United Kingdom', this.state.GBP], ['Australia', this.state.AUD], ['Canada', this.state.CAD], ['China', this.state.CNY], ['Switzerland', this.state.CHF], ['South Korea', this.state.KRW], ['Brazil', this.state.BRL], ['Russia', this.state.RUB], ['South Africa', this.state.ZAR], ['Nigeria', this.state.NGN], ['Egypt', this.state.EGP], ['Algeria', this.state.DZD], ['Morocco', this.state.MAD], ['Philippines', this.state.PHP], ['India', this.state.INR]],\n        options: {\n          colorAxis: {\n            colors: ['#e6ab8c', 'white', '#b8e68c']\n          }\n        } // Note: you will need to get a mapsApiKey for your project.\n        // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\n        ,\n        mapsApiKey: \"AIzaSyAkYBa9bM17NKiDU2e5MU-hqCitP7HD0hM\",\n        rootProps: {\n          'data-testid': '1'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/jcawl/code/react/data-vizualization/src/Map.js"],"names":["React","Chart","Financials","Component","state","contacts","USD","JPY","EUR","GBP","AUD","CAD","CNY","CHF","KRW","BRL","RUB","ZAR","NGN","EGP","DZD","MAD","PHP","INR","componentDidMount","fetch","then","res","json","data","console","log","quote","setState","catch","render","colorAxis","colors"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Chart from \"react-google-charts\"\n\nexport default class Financials extends React.Component{\n\n    state = {\n        contacts: [],\n        USD: 0,\n        JPY: 0,\n        EUR: 0,\n        GBP: 0,\n        AUD: 0,\n        CAD: 0,\n        CNY: 0,\n        CHF: 0,\n        KRW: 0,\n        BRL: 0,\n        RUB: 0,\n        ZAR: 0,\n        NGN: 0,\n        EGP: 0,\n        DZD: 0,\n        MAD: 0,\n        PHP: 0,\n        INR: 0\n      }\n\n\n    componentDidMount() {\n        fetch('https://finnhub.io/api/v1/forex/rates?base=USD&token=bvhs6ef48v6okueau8n0')\n        .then(res => res.json())\n        .then((data) => {\n          console.log(data.quote);\n          this.setState({ contacts: data })\n          this.setState({ USD: data.quote.USD})\n          this.setState({ JPY: data.quote.JPY})\n          this.setState({ EUR: data.quote.EUR})\n          this.setState({ GBP: data.quote.GBP})\n          this.setState({ AUD: data.quote.AUD})\n          this.setState({ CAD: data.quote.CAD})\n          this.setState({ CNY: data.quote.CNY})\n          this.setState({ CHF: data.quote.CHF})\n          this.setState({ KRW: data.quote.KRW})\n          this.setState({ BRL: data.quote.BRL})\n          this.setState({ RUB: data.quote.RUB})\n          this.setState({ ZAR: data.quote.ZAR})\n          this.setState({ NGN: data.quote.NGN})\n          this.setState({ EGP: data.quote.EGP})\n          this.setState({ DZD: data.quote.DZD})\n          this.setState({ MAD: data.quote.MAD})\n          this.setState({ PHP: data.quote.PHP})\n          this.setState({ INR: data.quote.INR})\n        })\n        .catch(console.log);\n      }\n\n    render () {\n        return(\n            <div style={{\"width\":\"100%\", \"height\":\"90%\", \"margineLeft\":\"auto\"}}>\n                <Chart\n                  width={'80vw'}\n                  height={'80vh'}\n                  chartType=\"GeoChart\"\n                  data={[\n                    ['Country', '1 USD'],\n                    ['United States', this.state.USD],\n                    ['Japan', this.state.JPY],\n                    ['Germany', this.state.EUR],\n                    ['United Kingdom', this.state.GBP],\n                    ['Australia', this.state.AUD],\n                    ['Canada', this.state.CAD],\n                    ['China', this.state.CNY],\n                    ['Switzerland', this.state.CHF],\n                    ['South Korea', this.state.KRW],\n                    ['Brazil', this.state.BRL],\n                    ['Russia', this.state.RUB],\n                    ['South Africa', this.state.ZAR],\n                    ['Nigeria', this.state.NGN],\n                    ['Egypt', this.state.EGP],\n                    ['Algeria', this.state.DZD],\n                    ['Morocco', this.state.MAD],\n                    ['Philippines', this.state.PHP],\n                    ['India', this.state.INR]\n                  ]}\n                  options={{\n                    colorAxis: { colors: ['#e6ab8c', 'white', '#b8e68c'] },\n                  }}\n                  // Note: you will need to get a mapsApiKey for your project.\n                  // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\n                  mapsApiKey=\"AIzaSyAkYBa9bM17NKiDU2e5MU-hqCitP7HD0hM\"\n                  rootProps={{ 'data-testid': '1' }}\n                />\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}